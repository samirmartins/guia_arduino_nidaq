{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"In\u00edcio","text":"<p> Grupo de Controle e Modelagem </p>"},{"location":"#guia-de-uso-nidaq-e-arduino","title":"Guia de Uso - NIDAQ e Arduino","text":"<p>Este \u00e9 um guia r\u00e1pido para trabalho com placas de aquisi\u00e7\u00e3o de dados NIDAQ e Arduino. O prop\u00f3osito  deste conte\u00fado \u00e9 auxiliar novos membros do GCOM - Grupo de Controle e Modelagem, assim como qualquer interessado que precise utilizar NIDAQ (National Instruments Data Acquisition) ou Arduino em projetos de ensino, pesquisa e experimenta\u00e7\u00e3o.</p> <p>Aqui voc\u00ea encontrar\u00e1 instru\u00e7\u00f5es simples, exemplos comentados e links de refer\u00eancia para que consiga configurar seu ambiente e iniciar testes rapidamente.</p>"},{"location":"#conteudo","title":"Conte\u00fado","text":""},{"location":"#placas-nidaq-python","title":"Placas NIDAQ + Python","text":"<ul> <li>Instala\u00e7\u00e3o de bibliotecas e drivers  </li> <li>Cria\u00e7\u00e3o de tarefas e canais virtuais  </li> <li>Aquisi\u00e7\u00e3o de sinais anal\u00f3gicos e digitais  </li> <li>Temporiza\u00e7\u00e3o e modos de amostragem (software e hardware)  </li> <li>Diferen\u00e7a entre DIFF, RSE e NRSE </li> <li>Envio de sinais (Analog Output) com exemplos pr\u00e1ticos  </li> </ul>"},{"location":"#arduino","title":"Arduino","text":"<ul> <li>Instala\u00e7\u00e3o e configura\u00e7\u00e3o do Arduino IDE  </li> <li>Sele\u00e7\u00e3o de placa e porta serial  </li> <li>Instala\u00e7\u00e3o de drivers para placas originais e clones  </li> <li>Exemplos de aplica\u00e7\u00e3o:  </li> <li>Acionamento de LED com bot\u00e3o  </li> <li>Leitura de potenci\u00f4metro via porta anal\u00f3gica  </li> <li>Sugest\u00e3o de ambientes de simula\u00e7\u00e3o (TinkerCAD)  </li> </ul>"},{"location":"#objetivo","title":"Objetivo","text":"<p>O prop\u00f3sito deste site \u00e9 desmistificar o uso das ferramentas de hardware em conjunto com programa\u00e7\u00e3o. Acreditamos que tanto a integra\u00e7\u00e3o com placas de aquisi\u00e7\u00e3o profissionais (NIDAQ) quanto a versatilidade do Arduino formam uma base s\u00f3lida para prototipagem r\u00e1pida, ensino e desenvolvimento em Engenharia El\u00e9trica e \u00e1reas correlatas.</p>"},{"location":"#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>O conte\u00fado foi escrito em linguagem direta, priorizando uso pr\u00e1tico e exemplos funcionais.  </li> <li>Este material n\u00e3o substitui a documenta\u00e7\u00e3o oficial. Links e refer\u00eancias externas est\u00e3o indicados ao longo dos guias.  </li> <li>Recomenda-se conhecimento pr\u00e9vio de Python (para NIDAQ) e C/C++ b\u00e1sico (para Arduino).  </li> </ul>"},{"location":"#autores","title":"Autores","text":"<p>A primeira vers\u00e3o deste material foi elaborada por Samir Martins e Wendell Pinto.  Melhorias s\u00e3o sempre bem-vindas! Sugest\u00f5es podem ser enviadas para gcom@ufsj.edu.br.</p>"},{"location":"arduino/","title":"Arduino","text":""},{"location":"arduino/#o-que-e-esse-guia","title":"O que \u00e9 esse guia?","text":"<p>Um manual r\u00e1pido para trabalho com placas Arduino, al\u00e9m de instala\u00e7\u00e3o e configura\u00e7\u00f5es do Arduino IDE.</p>"},{"location":"arduino/#instalacao-do-arduino-ide","title":"Instala\u00e7\u00e3o do Arduino IDE","text":"<p>Arduino IDE (Ambiente de Desenvolvimento Integrado - IDE) \u00e9 um software onde \u00e9 poss\u00edvel desenvolver e  compilar c\u00f3digos em C/C++, e tamb\u00e9m enviar esse c\u00f3digo para o microcontrolador, onde o mesmo funcionar\u00e1 de forma independente, mesmo se desconectado do computador. Para o download da IDE que permite a programa\u00e7\u00e3o de placas Arduino acesse aqui.  A instala\u00e7\u00e3o segue os moldes padr\u00f5es de qualquer instalador convencional.</p>"},{"location":"arduino/#configuracoes","title":"Configura\u00e7\u00f5es","text":"<p>Ap\u00f3s instalar com sucesso a IDE, ser\u00e1 necess\u00e1rio conectar o microcontrolador ao computador por meio de uma porta USB. Voc\u00ea precisar\u00e1 selecionar qual o modelo de arduino est\u00e1 sendo utilizado (ex: Arduino UNO, Arduino NANO),  conforme apresentado na imagem que segue.</p> <p></p> <p>Em seguida, ser\u00e1 necess\u00e1rio indicar \u00e0 IDE qual porta est\u00e1 sendo utilizada pelo seu Arduino. Para isto basta  ir novamente ao menu ferramentas, mas dessa vez selecionando a op\u00e7\u00e3o \"Port\". Voc\u00ea ver\u00e1 uma lista de portas dispon\u00edveis. Geralmente, a porta correta ser\u00e1 identificada com o nome da placa ao lado (ex: \"COM3 (Arduino Uno)\"). </p> <p>Se houver d\u00favidas, desconecte a placa, verifique quais portas  sumiram da lista e conecte-a novamente para confirmar. Alternativamente, consulte a porta que est\u00e1  sendo utilizada pelo seu Arduino no Gerenciador de Tarefas do Windows.</p> <p></p>"},{"location":"arduino/#instalacao-de-drivers","title":"Instala\u00e7\u00e3o de Drivers","text":"<p>Embora a instala\u00e7\u00e3o do Arduino IDE em sistemas operacionais modernos inclua os drivers  necess\u00e1rios para placas originais, placas \"clones\" ou similares podem exigir a instala\u00e7\u00e3o manual de um driver espec\u00edfico, para que a porta de comunica\u00e7\u00e3o seja reconhecida. </p> <p>Para isso verifique o chip pr\u00f3ximo \u00e0 porta USB da sua placa. Procure por nomes como \"CH340G\" ou \"FT232RL\".  Em seguida, baixe e instale o driver correspondente para o seu sistema operacional. As  duas imagens a seguir ilustram este procedimento.</p> Ferramenta Board Manager Instala\u00e7\u00e3o de drivers"},{"location":"arduino/#exemplos-de-aplicacao","title":"Exemplos de Aplica\u00e7\u00e3o","text":"<p>Existem diversos tipos de placas Arduino no mercado, e cada uma  apresenta diferen\u00e7as em suas portas de entrada e sa\u00edda, aqui temos alguns c\u00f3digos com comandos simples e gen\u00e9ricos que poder\u00e2o auxiliar no entendimento da placa.</p>"},{"location":"arduino/#geracao-de-sinais-acendendo-um-led-com-botao","title":"Gera\u00e7\u00e3o de Sinais - Acendendo um led com bot\u00e3o.","text":"<pre><code>int led = 13; //constante led refere-se ao pino digital 8.\nint botao = 11; //constante botao refere-se ao pino digital 2.\n\n//Vari\u00e1vel que conter\u00e1 os estados do bot\u00e3o (0 LOW, 1 HIGH).\nint estadoBotao = 0;\n\nvoid setup() {\n  pinMode(led,OUTPUT); //Definindo pino digital 8 como de sa\u00edda.\n  pinMode(botao,INPUT); //Definindo pino digital 2 como de entrada.\n}\n\nvoid loop() {\n  estadoBotao = digitalRead(botao);\n\n  if (estadoBotao == HIGH) {\n    digitalWrite(led,HIGH); //Bot\u00e3o pressionado, acende o led.\n  } else {\n    digitalWrite(led,LOW); //Bot\u00e3o n\u00e3o pressionado, apaga o led.\n  }\n}\n</code></pre> Acionamento do Led"},{"location":"arduino/#aquisicao-de-sinais-lendo-o-valor-de-um-potenciometro","title":"Aquisi\u00e7\u00e3o de Sinais - Lendo o valor de um potenci\u00f4metro.","text":"<pre><code>// Declara uma constante inteira chamada \"potenciometro\" e a associa ao pino anal\u00f3gico A0.\n// No Arduino, usar o n\u00famero 0 em fun\u00e7\u00f5es anal\u00f3gicas \u00e9 um atalho para o pino A0.\nconst int potenciometro = 0;\n\n// Cria uma vari\u00e1vel chamada \"valor\" para armazenar o n\u00famero lido do potenci\u00f4metro.\n// Inicializa uma ela com o valor 0.\nint valor = 0;\n\n\nvoid setup() {\n  // Inicia a comunica\u00e7\u00e3o serial com o computador a uma velocidade de 9600 bits por segundo.\n  // Isso \u00e9 essencial para que o Arduino possa enviar dados para o Monitor Serial.\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // L\u00ea a tens\u00e3o no pino anal\u00f3gico definido pela vari\u00e1vel \"potenciometro\" (A0).\n  // A fun\u00e7\u00e3o converte a tens\u00e3o lida (de 0V a 5V) em um valor num\u00e9rico entre 0 e 1023.\n  // O resultado dessa leitura \u00e9 armazenado na vari\u00e1vel \"valor\".\n  valor = analogRead(potenciometro);\n\n  // Envia o conte\u00fado atual da vari\u00e1vel \"valor\" para o Monitor Serial do computador.\n  // O \"ln\" (line new) faz com que, ap\u00f3s imprimir o valor, o cursor pule para a pr\u00f3xima linha.\n  Serial.println(valor);\n\n  // Pausa a execu\u00e7\u00e3o do programa por 100 milissegundos (ou 0.1 segundos).\n  // Isso evita que os dados sejam enviados r\u00e1pido demais, facilitando a leitura no monitor.\n  delay(100);\n}\n</code></pre> Leitura do Potenci\u00f4metro"},{"location":"arduino/#ambientes-de-simulacao","title":"Ambientes de Simula\u00e7\u00e3o","text":"<p>No nosso laborat\u00f3rio de pesquisa, h\u00e1 v\u00e1rias unidades de Arduino dispon\u00edveis para uso em  atividades de pesquisa. Entretanto, caso voc\u00ea se sinta inseguro, h\u00e1 diversas ferramentas que permitem a simula\u00e7\u00e3o, antes de ir para a parte pr\u00e1tica. Dentre os diversos ambientes de simula\u00e7\u00e3o o TinkerCAD se mostra como uma importante ferramenta nesta \u00e1reia. </p> <p>Para acessar e utilizar basta acesar o link acima e ap\u00f3s isso se cadastrar no site, h\u00e1 uma aba Aprenda com diversos  tutoriais nos mostrando como simular os circuitos mais b\u00e1sicos e as funcionalidades do site. </p>"},{"location":"nidaq/","title":"Guia de Uso - Placas NIDAQ + Python","text":""},{"location":"nidaq/#o-que-e-este-guia","title":"O que \u00e9 este guia?","text":"<p>Este guia foi escrito para novos membros do GCOM (Grupo de Controle e Modelagem). O objetivo desta se\u00e7\u00e3o \u00e9 desmistificar a utiliza\u00e7\u00e3o de placas de aquisi\u00e7\u00e3o de dados da National Instruments (NIDAQ - National  Instruments Data Acquisition USB Devices) utilizando Python como linguagem de programa\u00e7\u00e3o.</p> <ul> <li>OBSERVA\u00c7\u00c3O 1: para utilizar este guia, o usu\u00e1rio dever\u00e1 estar familiarizado com a linguagem Python, bem como instala\u00e7\u00e3o de bibliotecas. </li> <li>OBSERVA\u00c7\u00c3O 2: a biblioteca nidaqmx ser\u00e1 usada como base neste guia. Para instal\u00e1-la, use o comando: </li> </ul> <pre><code>pip install nidaqmx\n</code></pre> <p>Aqui expressamos publicamente nossa gratid\u00e3o aos autores da biblioteca.</p> <ul> <li>OBSERVA\u00c7\u00c3O 3: o driver USB da placa de aquisi\u00e7\u00e3o de dados precisa estar instalado. No momento da escrita deste  guia, o download podia ser realizado por este link, ap\u00f3s um  registro gratuito em www.ni.com. Alternativamente, o usu\u00e1rio pode instalar drivers utilizando tamb\u00e9m o comando:</li> </ul> <pre><code>python -m nidaqmx installdriver\n</code></pre> <p>Recomendamos a primeira op\u00e7\u00e3o como o padr\u00e3o.</p> <p>IMPORTANTE: esta \u00e9 uma vers\u00e3o muito resumida para uso r\u00e1pido. Maiores detalhes podem ser encontrados (em ingl\u00eas) em  https://pypi.org/project/nidaqmx/</p>"},{"location":"nidaq/#tarefas-task","title":"Tarefas (Task)","text":"<p>Uma tarefa \u00e9 um conjunto de canais virtuais com temporiza\u00e7\u00e3o e outras propriedades. Resumidamente,  s\u00e3o necess\u00e1rias tarefas para aquisi\u00e7\u00e3o e envio de dados. Maiores informa\u00e7\u00f5es aqui.</p> <p>Para criar uma tarefa, use o seguinte comando: </p> <pre><code>import nidaqmx # Importa a biblioteca \n\nwith nidaqmx.Task() as task: # Cria a tarefa \n    pass # Aqui voc\u00ea deve digitar o c\u00f3digo que dever\u00e1 ser executado naquela tarefa.\n</code></pre>"},{"location":"nidaq/#canais-virtuais","title":"Canais Virtuais","text":"<p>Um canal virtual \u00e9 um peda\u00e7o de software que encapsula o canal f\u00edsico juntamente com  informa\u00e7\u00f5es a seu respeito (faixa de medi\u00e7\u00e3o, configura\u00e7\u00e3o dos terminais e outras) que formatam os dados. Por outro lado, um canal f\u00edsico \u00e9 o terminal em que voc\u00ea mede ou gera sinais anal\u00f3gicos ou digitais, sendo que um canal f\u00edsico pode incluir mais que um terminal ( caso de entrada anal\u00f3gica diferencial).</p> <p>IMPORTANTE: cada canal f\u00edsico tem um nome \u00fanico (exemplos: Dev1/ao1) a depender do nome  do dispositivo (configur\u00e1vel via NI-MAX). Para maiores informa\u00e7\u00f5es acesse aqui.</p> <p>A seguir um exemplo de c\u00f3digo de como adicionar um canal de entrada anal\u00f3gica a uma tarefa, configurando range e lendo um dado: </p> <pre><code>import nidaqmx\n\nwith nidaqmx.Task() as task:\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\", min_val=-10.0, max_val=10.0)\n    task.read()\nAIChannel(name=Dev1/ai0)\n0.54875412354412544\n</code></pre> <p>Para adicionar m\u00faltiplos canais a uma tarefa e configur\u00e1-los: </p> <pre><code>import nidaqmx\n\nwith nidaqmx.Task() as task:\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\", min_val=-5.0, max_val=5.0)\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai1\", min_val=-10.0, max_val=10.0)\n    task.read()\nAIChannel(name=Dev1/ai0)\nAIChannel(name=Dev1/ai1)\n[1.12345897042644564, -2.1234589701454564]\n</code></pre>"},{"location":"nidaq/#temporizacao-da-sessao-e-periodo-de-amostragem","title":"Temporiza\u00e7\u00e3o da Sess\u00e3o e Per\u00edodo de Amostragem","text":"<p>Voc\u00ea pode usar a placa de aquisi\u00e7\u00e3o de dados da National para computar o tempo entre duas  amostras (per\u00edodo de amostragem) ou o pr\u00f3prio clock de seu computador. Esteja ciente que a utiliza\u00e7\u00e3o de placas de aquisi\u00e7\u00e3o de dados para temporiza\u00e7\u00e3o da sess\u00e3o/c\u00f4mputo do per\u00edodo de amostragem  (temporiza\u00e7\u00e3o por hardware) \u00e9 significativamente mais eficiente que a utiliza\u00e7\u00e3o de temporiza\u00e7\u00e3o  por software (pelo computador).</p> <p>Para adquirir sinais utilizando temporiza\u00e7\u00e3o por harware:</p> <pre><code>import nidaqmx\nfrom nidaqmx.constants import AcquisitionType, READ_ALL_AVAILABLE\n\nwith nidaqmx.Task() as task:\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\n    task.timing.cfg_samp_clk_timing(1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=10)\n    data = task.read(READ_ALL_AVAILABLE)\n    print(\"Acquired data: [\" + \", \".join(f\"{value:f}\" for value in data) + \"]\")\n\nAIChannel(name=Dev1/ai0)\nAcquired data: [-0.149693, 2.869503, 4.520249, 4.704886, 2.875912, -0.006104, -2.895596, -4.493698, -4.515671, -2.776574]\n</code></pre>"},{"location":"nidaq/#diff-rse-e-nrse","title":"DIFF, RSE e NRSE","text":"<p>H\u00e1 uma diferen\u00e7a entre m\u00e9todos de coleta de dados. Usando a configura\u00e7\u00e3o terminal </p> <ul> <li>DIFF (Differential): os terminais f\u00edsicos v\u00e3o medir a diferen\u00e7a de potencial entre dois terminais f\u00edsicos (AI+ e AI-). Esta \u00e9 prefer\u00edvel quando se tem ru\u00eddo de modo comum.  Evita, ainda, loops de terra </li> <li>RSE (Referenced Single-Ended): nesta configura\u00e7\u00e3o usa-se o terra do chassi do dispositivo DAQ como refer\u00eancia. Utiliza apenas uma entrada f\u00edsica por canal (ao contr\u00e1rio do DIFF, que usa duas). Entretanto, apresenta maior susceptibilidade a ru\u00eddo de modo comum e loops de terra.</li> <li>NRSE (Non-Referenced Single-Ended): usa uma refer\u00eancia de terra compartilhado por todos os canais. N\u00e3o possui,  necessariamente, o terra do chassi do dispositivo. Permite uma conex\u00e3o espec\u00edfica para o terra para todos os canais.</li> </ul> <p>Exemplo: </p> <pre><code>import nidaqmx\nfrom nidaqmx.constants import AcquisitionType, READ_ALL_AVAILABLE, TerminalConfiguration\n\nwith nidaqmx.Task() as task:\n\n    # ATEN\u00c7\u00c3O: DESCOMENTE UMA DAS LINHAS ABAIXO, CONFORME CONFIGURA\u00c7\u00c3O TERMINAL DESEJADA\n    #task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\", terminal_config=TerminalConfiguration.DIFF)\n    #task.ai_channels.add_ai_voltage_chan(\"Dev1/ai1\", terminal_config=TerminalConfiguration.RSE)\n    #task.ai_channels.add_ai_voltage_chan(\"Dev1/ai2\", terminal_config=TerminalConfiguration.NRSE)\n\n    task.timing.cfg_samp_clk_timing(1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=10)\n    data = task.read(READ_ALL_AVAILABLE)\n    print(\"Acquired data: [\" + \", \".join(f\"{value:f}\" for value in data) + \"]\")\n\nAIChannel(name=Dev1/ai0)\nAcquired data: [-0.149693, 2.869503, 4.520249, 4.704886, 2.875912, -0.006104, -2.895596, -4.493698, -4.515671, -2.776574]\n</code></pre>"},{"location":"nidaq/#envio-de-dados-analog-output","title":"Envio de dados - Analog Output","text":"<p>Podemos usar canais de sa\u00edda para gerar sinais de tens\u00e3o pela placa de aquisi\u00e7\u00e3o de  dados da National. Abaixo um exemplo de como utilizar o canal anal\u00f3gico ao0 (analog output 0) para enviar um sinal de tens\u00e3o utilizando uma tarefa com o m\u00e9todo write:</p> <pre><code>import nidaqmx\nfrom nidaqmx.constants import AcquisitionType\n\nwith nidaqmx.Task() as task:\n    data = []\n    total_samples = 1000\n    task.ao_channels.add_ao_voltage_chan(\"Dev1/ao0\")\n    task.timing.cfg_samp_clk_timing(\n        1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=total_samples\n    )\n\n    data = [5.0 * i / total_samples for i in range(total_samples)]\n    number_of_samples_written = task.write(data, auto_start=True)\n    print(f\"Generating {number_of_samples_written} voltage samples.\")\n    task.wait_until_done()\n    task.stop()\n</code></pre>"}]}